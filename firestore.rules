rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function isSelf(uid) { return signedIn() && request.auth.uid == uid; }

    // ===== users =====
    match /users/{userId} {
      // 自分のユーザードキュメントのみ読める（公開プロフィールにしたいなら read を緩める）
      allow read: if isSelf(userId);

      // 作成：自分の uid でのみ作成可。userUtils.js に合わせたキーを許可
      allow create: if isSelf(userId)
        && request.resource.data.keys().hasOnly([
          'uid','email','username','createdAt'
        ])
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.email is string
        && request.resource.data.username is string
        && request.resource.data.username.size() > 0
        && request.resource.data.createdAt is timestamp;

      // 更新/削除：自分のみ。更新時のフィールド制限をかけたい場合は hasOnly を追加
      allow update, delete: if isSelf(userId);
    }

    // ========= topics =========
    match /topics/{topicId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if signedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if signedIn() && resource.data.createdBy == request.auth.uid;

      match /submissions/{submissionId} {
        allow read: if true;
        allow create: if signedIn()
          && request.resource.data.userId == request.auth.uid
          && validSubmissionCreate();

        allow update: if
          (
            isSelf(resource.data.userId) &&
            request.resource.data.diff(resource.data).changedKeys()
              .hasOnly(['imageUrl','storagePath','caption','updatedAt'])
          )
          ||
          (
            signedIn() &&
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['votes'])
          );

        allow delete: if signedIn() && (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/topics/$(topicId)).data.createdBy == request.auth.uid
        );
      }

      match /votes/{userId} {
        allow read: if signedIn();
        allow create, update: if signedIn()
          && request.auth.uid == userId
          && request.resource.data.submissionId is string;
        allow delete: if signedIn() && (
          request.auth.uid == userId ||
          get(/databases/$(database)/documents/topics/$(topicId)).data.createdBy == request.auth.uid
        );
      }
    }

    // ========= helpers =========
    function isValidTopicCreate() {
      return request.resource.data.keys().hasOnly([
        'title','description','publishAt','uploadEndAt','votingEndAt',
        'createdAt','createdBy','isActive'
      ])
      && request.resource.data.title is string
      && request.resource.data.title.size() > 0
      && (!('description' in request.resource.data) || request.resource.data.description is string)
      && request.resource.data.publishAt is timestamp
      && request.resource.data.uploadEndAt is timestamp
      && request.resource.data.votingEndAt is timestamp
      && request.resource.data.isActive is bool
      && request.resource.data.createdBy == request.auth.uid
      && request.resource.data.publishAt < request.resource.data.uploadEndAt
      && request.resource.data.uploadEndAt < request.resource.data.votingEndAt;
    }

    function validSubmissionCreate() {
      return request.resource.data.keys().hasOnly([
        'userId','caption','imageUrl','storagePath','createdAt','votes'
      ])
      && request.resource.data.userId is string
      && request.resource.data.imageUrl is string
      && request.resource.data.storagePath is string
      && (!('caption' in request.resource.data) || request.resource.data.caption is string)
      && request.resource.data.votes is number;
    }
  }
}
